{"version":3,"sources":["eth.js","btc.js","doge.js","reportWebVitals.js","index.js"],"names":["FetchETH","state","loading","eth","a","fetch","response","json","data","this","setState","ethereum","className","Style","src","valueFormatter","usd","percentageFormater","usd_24h_change","React","Component","FetchBTC","btc","bitcoin","FetchDOGE","doge","dogecoin","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","numberWithCommas","x","toString","replace","parseFloat","toFixed","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.83b9171e.chunk.js","sourcesContent":["import React from \"react\";\nimport './index.css';\nimport {valueFormatter} from './index';\nimport {percentageFormater} from './index';\n\n\nexport default class FetchETH extends React.Component {\n\n  state = {\n    loading: true,\n    eth: null\n  };\n\n\n  async componentDidMount() {\n    const url = \"https://api.coingecko.com/api/v3/simple/price?ids=ethereum&vs_currencies=usd&include_24hr_change=true&include_last_updated_at=true%22%20-H%20%22accept:%20application/json\";\n    const response = await fetch(url);\n    const data = await response.json();\n    this.setState({eth: data.ethereum, loading:false });\n  }\n\n\n  render() {\n    if (this.state.loading) {\n      return(\n        <div className=\"coin\">\n          <div className=\"coinname\">loading...</div>\n        </div>\n      )\n    }\n\n    if (!this.state.eth) {\n      return(\n        <div className=\"coin\">\n          <div className=\"coinname\">Error Loading ETH!</div>\n        </div>\n      )\n    }\n\n    return (\n      <div className=\"coin\">\n        <div className=\"coinname\">Ethereum<img Style=\"height:6vh; width:6vh; transform: translateY(20%);\" src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/6/6f/Ethereum-icon-purple.svg/1200px-Ethereum-icon-purple.svg.png\"/></div>\n        {valueFormatter(this.state.eth.usd)}\n        {percentageFormater(this.state.eth.usd_24h_change)}\n      </div>\n    );\n  }\n}","import React from \"react\";\nimport {valueFormatter} from './index';\nimport {percentageFormater} from './index';\n\n\nexport default class FetchBTC extends React.Component {\n\n  state = {\n    loading: true,\n    btc: null\n  };\n\n  async componentDidMount() {\n    const url = \"https://api.coingecko.com/api/v3/simple/price?ids=bitcoin&vs_currencies=usd&include_24hr_change=true&include_last_updated_at=true%22%20-H%20%22accept:%20application/json\";\n    const response = await fetch(url);\n    const data = await response.json();\n    this.setState({btc: data.bitcoin, loading:false });\n  }\n\n\n  render() {\n    if (this.state.loading) {\n      return(\n        <div className=\"coin\">\n          <div className=\"coinname\">loading...</div>\n        </div>\n      )\n    }\n\n    if (!this.state.btc) {\n      return(\n        <div className=\"coin\">\n          <div className=\"coinname\">Error Loading BTC!</div>\n        </div>\n      )\n    }\n\n    return (\n      <div className=\"coin\">\n        <div className=\"coinname\">Bitcoin <img Style=\"height:6vh; width:6vh; transform: translateY(25%);\" src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/4/46/Bitcoin.svg/1200px-Bitcoin.svg.png\"/></div>\n        {valueFormatter(this.state.btc.usd)}\n        {percentageFormater(this.state.btc.usd_24h_change)}\n      </div>\n    );\n  }\n}","import React from \"react\";\nimport {valueFormatter} from './index';\nimport {percentageFormater} from './index';\n\n\nexport default class FetchDOGE extends React.Component {\n\n  state = {\n    loading: true,\n    doge: null\n  };\n\n  async componentDidMount() {\n    const url = \"https://api.coingecko.com/api/v3/simple/price?ids=dogecoin&vs_currencies=usd&include_24hr_change=true&include_last_updated_at=true%22%20-H%20%22accept:%20application/json\";\n    const response = await fetch(url);\n    const data = await response.json();\n    this.setState({doge: data.dogecoin, loading:false });\n  }\n\n\n  render() {\n    if (this.state.loading) {\n      return(\n        <div className=\"coin\">\n          <div className=\"coinname\">loading...</div>\n        </div>\n      )\n    }\n\n    if (!this.state.doge) {\n      return(\n        <div className=\"coin\">\n          <div className=\"coinname\">Error Loading DOGE!</div>\n        </div>\n      )\n    }\n\n    return (\n      <div className=\"coin\">\n        <div className=\"coinname\">Dogecoin <img Style=\"height:6vh; width:6vh; transform: translateY(27%);\" src=\"https://i.pinimg.com/originals/9b/09/10/9b0910ff733c6947d778ee6fb5b5e254.png\"/></div>\n        {valueFormatter(this.state.doge.usd)}\n        {percentageFormater(this.state.doge.usd_24h_change)}\n      </div>\n    );\n  }\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport FetchETH from './eth';\nimport FetchBTC from './btc';\nimport FetchDOGE from './doge';\nimport reportWebVitals from './reportWebVitals';\n\n//puts commas between every 3 numbers\nexport function numberWithCommas(x) {\n  return x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n}\n\n//converts input into a percentage. (5 -> 5.00%)\nexport function percentageFormater(x){\n  if(x > 0){\n    return(\n      <div className=\"coinpercent\" Style=\"color: rgb(20, 170, 50);\">\n        {\"+\" + parseFloat(x).toFixed(2) + \"%\"}\n      </div>\n    )\n  }\n  else if(x < 0){\n    return(\n      <div className=\"coinpercent\" Style=\"color: rgb(170, 20, 50);\">\n        {parseFloat(x).toFixed(2) + \"%\"}\n      </div>\n    )\n  }\n  else{\n    <div className=\"coinpercent\" Style=\"color: rgb(0, 0, 0);\">\n      {parseFloat(x).toFixed(2) + \"%\"}\n    </div>\n  }\n}\n\n//convert input into USD format. Adds more decimals if number is tiny\nexport function valueFormatter(x){\n  if(x < 1){\n    return(\n      <div className=\"coinvalue\">\n        {\"$\" + parseFloat(x).toFixed(4)}\n      </div>\n    )\n  }\n  else if(x < 100){\n    return(\n      <div className=\"coinvalue\">\n        {\"$\" + parseFloat(x).toFixed(2)}\n      </div>\n    )\n  }\n  else{\n    return(\n      <div className=\"coinvalue\">\n        {\"$\" + numberWithCommas(parseFloat(x).toFixed(0))}\n      </div>\n    )\n  }\n}\n\n\nReactDOM.render(\n  <React.StrictMode>\n      <div className=\"app\">\n        <FetchETH />\n        <FetchBTC />\n        <FetchDOGE />\n      </div>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nreportWebVitals();\n"],"sourceRoot":""}